---
import Layout from "../layouts/Layout.astro";
import "../styles/style.css";
---

<Layout>
    <div id="project-container">
        <h1 id="project-name">Loading project...</h1>
        <p id="project-description"></p>

        <select id="time-range">
            <option value="10m">Last 10 minutes</option>
            <option value="30m" selected>Last 30 minutes</option>
            <option value="1h">Last 1 hour</option>
            <option value="6h">Last 6 hours</option>
            <option value="12h">Last 12 hours</option>
            <option value="24h">Last 24 hours</option>
        </select>
        <div id="group-emotionbar-container">
            <h3>Group Mood Over Time</h3>
            <div class="emotion-gradient-bar-wrapper">
                <div class="emotion-gradient-bar"></div>
                <div id="emotion-tooltip"></div>
            </div>
            <div id="group-emotionbar-key">
                <ul>
                    <li id="key-anger">Anger</li>
                    <li id="key-disgust">Disgust</li>
                    <li id="key-fear">Fear</li>
                    <li id="key-happiness">Happiness</li>
                    <li id="key-sadness">Sadness</li>
                    <li id="key-surprise">Surprise</li>
                    <li id="key-neutral">Neutral</li>
                    <li id="key-nodata">No Data</li>
                </ul>
            </div>
        </div>

        <p id="group-mood-summary">
            <strong>Group Mood Summary:</strong>
            <span id="group-mood-text">Loading...</span>
        </p>

        <h2>Members</h2>
        <div id="add-member-section" style="display: none;">
            <input
                type="text"
                id="new-member-username"
                style="max-width: 25%; min-width: 300px"
                placeholder="Enter username to add"
            />
            <button id="add-member-button">Add Member</button>
            <p id="add-member-message" class="message"></p>
        </div>
        <div id="member-list">Loading members...</div>

        <h2>Repositories</h2>
        <div id="add-repo-section" style="display: none;">
            <input
                type="text"
                id="new-repo-url"
                style="max-width: 50%; min-width: 300px"
                placeholder="Enter Git repository URL"
            />
            <button id="add-repo-button">Add Repository</button>
            <p id="add-repo-message" class="message"></p>
        </div>
        <div id="repo-list">Loading repositories...</div>

        <div id="project-actions-bottom">
            <button id="delete-project-button" class="danger-button"
                >Delete Project</button
            >
            <p id="delete-project-message" class="message"></p>
        </div>
    </div>
</Layout>

<script>
    import { chorusAPI } from "../lib/sdk.js";
    import { navigate } from "astro:transitions/client";

    const newNeutralColor = "rgb(173, 216, 230)";
    const noDataColor = "rgb(220, 220, 220)";

    const emotionColorMap = {
        anger: "rgb(239, 83, 80)",
        disgust: "rgb(102, 187, 106)",
        fear: "rgb(66, 165, 245)",
        happiness: "rgb(255, 213, 79)",
        happy: "rgb(255, 213, 79)",
        sadness: "rgb(126, 87, 194)",
        surprise: "rgb(255, 167, 38)",
        neutral: newNeutralColor,
        nodata: noDataColor,
    };

    function getColor(emotionKey: string): string {
        return (
            emotionColorMap[
                emotionKey.toLowerCase() as keyof typeof emotionColorMap
            ] || noDataColor
        );
    }

    function parseTimeRangeToSeconds(timeRangeString: string): number {
        const value = parseInt(timeRangeString.slice(0, -1));
        const unit = timeRangeString.slice(-1).toLowerCase();
        switch (unit) {
            case "m":
                return value * 60;
            case "h":
                return value * 60 * 60;
            default:
                return value;
        }
    }

    let currentDataTimeRangeEnd: number | null = null;
    let currentOwnerId: string | null = null;
    let currentUserDetails: { user_id: string } | null = null;

    async function loadRepoList(projectId: string, repos: string[] | undefined, ownerId: string | null) {
        const repoListElement = document.getElementById("repo-list");
        repoListElement.innerHTML = "";

        if (!repos || repos.length === 0) {
            repoListElement.innerHTML = "<p>No repositories linked to this project.</p>";
            return;
        }

        if (!currentUserDetails) {
            try {
                currentUserDetails = await chorusAPI.getUserDetails();
            } catch (error) {
                console.error("Error fetching user details for repo list:", error);
            }
        }
        const isOwner = currentUserDetails && currentUserDetails.user_id === ownerId;

        repos.forEach(repoUrl => {
            const repoContainer = document.createElement("div");
            repoContainer.className = "repo-item";

            const repoUrlElement = document.createElement("span");
            repoUrlElement.textContent = repoUrl;
            repoUrlElement.className = "repo-url";
            repoContainer.appendChild(repoUrlElement);

            if (isOwner) {
                const removeButton = document.createElement("button");
                removeButton.textContent = "Remove";
                removeButton.className = "remove-repo-button danger-button";
                removeButton.addEventListener("click", () => {
                    removeRepoHandler(projectId, repoUrl);
                });
                repoContainer.appendChild(removeButton);
            }

            repoListElement.appendChild(repoContainer);
        });
    }

    async function addRepoHandler(projectId: string) {
        const repoUrlInput = document.getElementById("new-repo-url") as HTMLInputElement;
        const messageElement = document.getElementById("add-repo-message");
        const repoUrl = repoUrlInput.value.trim();

        if (!repoUrl) {
            messageElement.textContent = "Please enter a repository URL.";
            messageElement.className = "message error";
            return;
        }

        try {
            new URL(repoUrl);
        } catch (_) {
            messageElement.textContent = "Please enter a valid URL.";
            messageElement.className = "message error";
            return;
        }

        messageElement.textContent = "Adding repository...";
        messageElement.className = "message info";

        try {
            await chorusAPI.addRepoToProject(projectId, repoUrl);

            messageElement.textContent = `Successfully added repository.`;
            messageElement.className = "message success";
            repoUrlInput.value = "";

            const project = await chorusAPI.getProjectDetails(projectId);
            await loadRepoList(projectId, project.repos, currentOwnerId);

            setTimeout(() => {
                if (messageElement.textContent === `Successfully added repository.`) {
                    messageElement.textContent = "";
                    messageElement.className = "message";
                }
            }, 3000);
        } catch (error: any) {
            console.error("Error adding repository:", error);
            let detail = error.message || "Unknown error";
            try {
                const match = error.message.match(/details: (.*)/);
                if (match && match[1]) {
                    const errorDetails = JSON.parse(match[1]);
                    if (errorDetails.detail) {
                        detail = errorDetails.detail;
                    }
                }
            } catch (parseError) { }
            messageElement.textContent = `Failed to add repository: ${detail}`;
            messageElement.className = "message error";
            setTimeout(() => {
                if (messageElement.textContent === `Failed to add repository: ${detail}`) {
                    messageElement.textContent = "";
                    messageElement.className = "message";
                }
            }, 5000);
        }
    }

    async function removeRepoHandler(projectId: string, repoUrl: string) {
        const messageElement = document.getElementById("add-repo-message");

        if (!window.confirm(`Are you sure you want to remove the repository ${repoUrl}?`)) {
            return;
        }

        messageElement.textContent = `Removing repository ${repoUrl}...`;
        messageElement.className = "message info";

        try {
            await chorusAPI.removeRepoFromProject(projectId, repoUrl);

            messageElement.textContent = `Successfully removed repository.`;
            messageElement.className = "message success";

            const project = await chorusAPI.getProjectDetails(projectId);
            await loadRepoList(projectId, project.repos, currentOwnerId);

            setTimeout(() => {
                if (messageElement.textContent === `Successfully removed repository.`) {
                    messageElement.textContent = "";
                    messageElement.className = "message";
                }
            }, 3000);
        } catch (error: any) {
            console.error(`Error removing repository ${repoUrl}:`, error);
            let detail = error.message || "Unknown error";
            try {
                const match = error.message.match(/details: (.*)/);
                if (match && match[1]) {
                    const errorDetails = JSON.parse(match[1]);
                    if (errorDetails.detail) {
                        detail = errorDetails.detail;
                    }
                }
            } catch (parseError) { }
            messageElement.textContent = `Failed to remove repository: ${detail}`;
            messageElement.className = "message error";
            setTimeout(() => {
                if (messageElement.textContent === `Failed to remove repository: ${detail}`) {
                    messageElement.textContent = "";
                    messageElement.className = "message";
                }
            }, 5000);
        }
    }

    async function deleteProjectHandler(projectId: string) {
        const messageElement = document.getElementById("delete-project-message");
        const deleteButton = document.getElementById("delete-project-button") as HTMLButtonElement;

        if (!messageElement || !deleteButton) return;

        messageElement.textContent = "Deleting project...";
        messageElement.className = "message info";
        deleteButton.disabled = true;

        try {
            await chorusAPI.deleteProject(projectId);
            messageElement.textContent = "Project deleted successfully. Redirecting...";
            messageElement.className = "message success";
            // Redirect to dashboard after a short delay
            setTimeout(() => {
                navigate("/dashboard");
            }, 2000);
        } catch (error: any) {
            console.error("Error deleting project:", error);
            let detail = error.message || "Unknown error";
            try {
                const match = error.message.match(/details: (.*)/);
                if (match && match[1]) {
                    const errorDetails = JSON.parse(match[1]);
                    if (errorDetails.detail) {
                        detail = errorDetails.detail;
                    }
                }
            } catch (parseError) { }
            messageElement.textContent = `Failed to delete project: ${detail}`;
            messageElement.className = "message error";
            deleteButton.disabled = false; // Re-enable button on error
            // Optionally clear the error message after some time
            setTimeout(() => {
                if (messageElement.textContent === `Failed to delete project: ${detail}`) {
                    messageElement.textContent = "";
                    messageElement.className = "message";
                }
            }, 5000);
        }
    }

    async function loadMemberList(projectId: string, ownerId: string | null) {
        const memberListElement = document.getElementById("member-list");
        memberListElement.innerHTML = "Loading members...";

        if (!currentUserDetails) {
            try {
                currentUserDetails = await chorusAPI.getUserDetails();
            } catch (error) {
                console.error("Error fetching user details for member list:", error);
            }
        }
        const me = currentUserDetails;
        const isOwner = me && me.user_id === ownerId;

        const addMemberSection = document.getElementById("add-member-section");
        if (addMemberSection) {
            addMemberSection.style.display = isOwner ? "flex" : "none";
        }

        try {
            const project = await chorusAPI.getProjectDetails(projectId);

            const memberPromises = project.members.map((memberId) =>
                chorusAPI.getUserDetailsById(memberId),
            );
            const memberDetails = await Promise.all(memberPromises);
            memberListElement.innerHTML = "";

            const memberReportPromises = memberDetails.map(async (user) => {
                try {
                    const reports = await chorusAPI.getIndividualReports(
                        projectId,
                        user.user_id,
                        1,
                        1,
                    );
                    return { user, reports };
                } catch (reportError) {
                    console.error(
                        `Error loading reports for user ${user.username}:`,
                        reportError,
                    );
                    return { user, reports: [], error: true };
                }
            });

            const membersWithReports = await Promise.all(memberReportPromises);

            membersWithReports.forEach(({ user, reports, error }) => {
                const memberContainer = document.createElement("div");
                memberContainer.className = "member-item";

                const memberHeader = document.createElement("div");
                memberHeader.className = "member-header";

                const usernameHeader = document.createElement("h4");
                usernameHeader.textContent = user.username;

                if (ownerId && user.user_id === ownerId) {
                    const ownerLabel = document.createElement("span");
                    ownerLabel.textContent = " (Owner)";
                    ownerLabel.className = "owner-label";
                    usernameHeader.appendChild(ownerLabel);
                }
                memberHeader.appendChild(usernameHeader);

                if (isOwner && user.user_id !== ownerId) {
                    const removeButton = document.createElement("button");
                    removeButton.textContent = "Remove";
                    removeButton.className =
                        "remove-member-button danger-button";
                    removeButton.dataset.userId = user.user_id;
                    removeButton.dataset.username = user.username;
                    removeButton.addEventListener("click", () => {
                        removeMemberHandler(
                            projectId,
                            user.user_id,
                            user.username,
                        );
                    });
                    memberHeader.appendChild(removeButton);
                }

                memberContainer.appendChild(memberHeader);

                const reportParagraph = document.createElement("p");
                reportParagraph.className = "report-summary";

                if (error) {
                    reportParagraph.textContent = "Error loading report.";
                    reportParagraph.style.color = "red";
                } else if (reports && reports.length > 0) {
                    const report = reports[0];
                    if (report.is_alarm) {
                        reportParagraph.style.color = "red";
                        reportParagraph.style.fontWeight = "bold";
                        reportParagraph.textContent =
                            report.alarm_message ||
                            "Alarm triggered (no message).";
                    } else {
                        reportParagraph.textContent =
                            report.mood_summary || "No summary available.";
                    }
                } else {
                    reportParagraph.textContent = "No recent report found.";
                    reportParagraph.style.fontStyle = "italic";
                }

                memberContainer.appendChild(reportParagraph);
                memberListElement.appendChild(memberContainer);
            });
        } catch (userError) {
            memberListElement.innerHTML =
                "<div class='error-message'>Error loading member details.</div>";
        }
    }

    async function loadStaticProjectData(projectId: string) {
        const projectNameElement = document.getElementById("project-name");
        const projectDescriptionElement = document.getElementById(
            "project-description",
        );
        const groupMoodTextElement = document.getElementById("group-mood-text");
        const addRepoSection = document.getElementById("add-repo-section");

        projectNameElement.textContent = "Loading project...";
        projectDescriptionElement.textContent = "";
        if (groupMoodTextElement)
            groupMoodTextElement.textContent = "Loading...";

        currentUserDetails = null;
        try {
            currentUserDetails = await chorusAPI.getUserDetails();
        } catch (error) {
            console.error("Error fetching current user details:", error);
        }

        try {
            const project = await chorusAPI.getProjectDetails(projectId);
            currentOwnerId = project.owner_id;
            projectNameElement.textContent = project.name;
            projectDescriptionElement.textContent =
                project.description || "No description available.";

            const isOwner = currentUserDetails && currentUserDetails.user_id === currentOwnerId;
            if (addRepoSection) {
                addRepoSection.style.display = isOwner ? "flex" : "none";
            }

            await loadRepoList(projectId, project.repos, currentOwnerId);

            try {
                const groupReports = await chorusAPI.getGroupReports(
                    projectId,
                    1,
                    1,
                );
                if (groupMoodTextElement) {
                    if (groupReports && groupReports.length > 0) {
                        groupMoodTextElement.textContent =
                            groupReports[0].mood_summary ||
                            "No summary available.";
                        groupMoodTextElement.style.fontStyle = "normal";
                        groupMoodTextElement.style.color = "#333";
                    } else {
                        groupMoodTextElement.textContent =
                            "No recent group report found.";
                        groupMoodTextElement.style.fontStyle = "italic";
                        groupMoodTextElement.style.color = "#555";
                    }
                }
            } catch (groupReportError) {
                console.error("Error loading group report:", groupReportError);
                if (groupMoodTextElement) {
                    groupMoodTextElement.textContent =
                        "Error loading group summary.";
                    groupMoodTextElement.style.color = "red";
                }
            }

            await loadMemberList(projectId, currentOwnerId);

        } catch (error) {
            projectNameElement.textContent = "Error";
            projectDescriptionElement.textContent =
                "Failed to load project details.";
            if (addRepoSection) addRepoSection.style.display = "none";
            const repoListElement = document.getElementById("repo-list");
            if (repoListElement) repoListElement.innerHTML = "<div class='error-message'>Failed to load repositories.</div>";
        }
    }

    document.addEventListener("astro:page-load", () => {
        currentOwnerId = null;
        currentUserDetails = null;
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get("project_id");
        const timeRangeFromUrl = urlParams.get("time_range");

        const timeRangeSelect = document.getElementById(
            "time-range",
        ) as HTMLSelectElement;
        const projectNameElement = document.getElementById("project-name");
        const projectDescriptionElement = document.getElementById(
            "project-description",
        );
        const groupEmotionBarElement = document.querySelector(
            "#group-emotionbar-container .emotion-gradient-bar",
        ) as HTMLElement;
        const barWrapper = document.querySelector(
            ".emotion-gradient-bar-wrapper",
        ) as HTMLElement;
        const tooltipElement = document.getElementById(
            "emotion-tooltip",
        ) as HTMLElement;
        const addMemberButton = document.getElementById("add-member-button");
        const addMemberInput = document.getElementById(
            "new-member-username",
        ) as HTMLInputElement;
        const deleteProjectButton = document.getElementById(
            "delete-project-button",
        );
        const deleteProjectMessage = document.getElementById(
            "delete-project-message",
        );
        const addRepoButton = document.getElementById("add-repo-button");
        const addRepoInput = document.getElementById("new-repo-url") as HTMLInputElement;
        const addRepoMessage = document.getElementById("add-repo-message");
        const repoListElement = document.getElementById("repo-list");

        if (
            timeRangeFromUrl &&
            [...timeRangeSelect.options].some(
                (opt) => opt.value === timeRangeFromUrl,
            )
        ) {
            timeRangeSelect.value = timeRangeFromUrl;
        } else {
            const defaultTimeRange = timeRangeSelect.value;
            if (timeRangeFromUrl !== defaultTimeRange) {
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set("time_range", defaultTimeRange);
                history.replaceState({}, "", currentUrl.toString());
            }
        }

        const initialLoad = () => {
            const selectedTimeRangeValue = timeRangeSelect.value;
            const timeRangeSeconds = parseTimeRangeToSeconds(
                selectedTimeRangeValue,
            );
            const timeRangeEnd = Math.floor(Date.now() / 1000);
            const timeRangeStart = timeRangeEnd - timeRangeSeconds;
            currentDataTimeRangeEnd = timeRangeEnd;

            if (projectId) {
                loadStaticProjectData(projectId).then(() => {
                    loadTimeDependentData(
                        projectId,
                        timeRangeStart,
                        timeRangeEnd,
                    );
                });
            }
        };

        chorusAPI
            .isLoggedIn()
            .then((isLoggedIn) => {
                if (!isLoggedIn) {
                    setTimeout(() => navigate("/login"), 1000);
                } else {
                    if (projectId) {
                        initialLoad();

                        timeRangeSelect.addEventListener("change", (event) => {
                            const newTimeRangeValue = (
                                event.target as HTMLSelectElement
                            ).value;
                            const currentUrl = new URL(window.location.href);
                            currentUrl.searchParams.set(
                                "time_range",
                                newTimeRangeValue,
                            );
                            history.pushState({}, "", currentUrl.toString());

                            const timeRangeSeconds =
                                parseTimeRangeToSeconds(newTimeRangeValue);
                            const timeRangeEnd = Math.floor(Date.now() / 1000);
                            const timeRangeStart =
                                timeRangeEnd - timeRangeSeconds;
                            currentDataTimeRangeEnd = timeRangeEnd;

                            loadTimeDependentData(
                                projectId,
                                timeRangeStart,
                                timeRangeEnd,
                            );
                        });

                        if (addMemberButton) {
                            addMemberButton.addEventListener("click", () => {
                                addUserToProjectHandler(projectId);
                            });
                        }
                        if (addMemberInput) {
                            addMemberInput.addEventListener(
                                "keypress",
                                (event) => {
                                    if (event.key === "Enter") {
                                        event.preventDefault();
                                        addUserToProjectHandler(projectId);
                                    }
                                },
                            );
                        }

                        if (addRepoButton) {
                            addRepoButton.addEventListener("click", () => {
                                addRepoHandler(projectId);
                            });
                        }
                        if (addRepoInput) {
                            addRepoInput.addEventListener(
                                "keypress",
                                (event) => {
                                    if (event.key === "Enter") {
                                        event.preventDefault();
                                        addRepoHandler(projectId);
                                    }
                                },
                            );
                        }

                        if (deleteProjectButton) {
                            deleteProjectButton.addEventListener(
                                "click",
                                () => {
                                    if (
                                        window.confirm(
                                            "Are you sure you want to delete this project? This action cannot be undone.",
                                        )
                                    ) {
                                        // Ensure projectId is passed here
                                        if (projectId) {
                                            deleteProjectHandler(projectId);
                                        } else {
                                            console.error("Project ID is missing, cannot delete.");
                                            const msgEl = document.getElementById("delete-project-message");
                                            if (msgEl) {
                                                msgEl.textContent = "Error: Project ID not found.";
                                                msgEl.className = "message error";
                                            }
                                        }
                                    }
                                },
                            );
                        }

                        if (
                            barWrapper &&
                            groupEmotionBarElement &&
                            tooltipElement
                        ) {
                            barWrapper.addEventListener(
                                "mousemove",
                                (event) => {
                                    if (currentDataTimeRangeEnd !== null) {
                                        const selectedTimeRangeValue =
                                            timeRangeSelect.value;
                                        const durationSeconds =
                                            parseTimeRangeToSeconds(
                                                selectedTimeRangeValue,
                                            );
                                        const timeRangeEnd =
                                            currentDataTimeRangeEnd;
                                        const timeRangeStart =
                                            timeRangeEnd - durationSeconds;

                                        const rect =
                                            groupEmotionBarElement.getBoundingClientRect();
                                        const x = event.clientX - rect.left;
                                        const width = rect.width;
                                        const percentage = Math.max(
                                            0,
                                            Math.min(100, (x / width) * 100),
                                        );

                                        const currentTimestamp =
                                            timeRangeStart +
                                            (percentage / 100) *
                                                durationSeconds;

                                        const date = new Date(
                                            currentTimestamp * 1000,
                                        );

                                        const options: Intl.DateTimeFormatOptions =
                                            {
                                                year: "numeric",
                                                month: "long",
                                                day: "numeric",
                                                hour: "numeric",
                                                minute: "2-digit",
                                                second: "2-digit",
                                                hour12: true,
                                                timeZone: "America/Chicago",
                                                timeZoneName: "short",
                                            };
                                        const timeString = date.toLocaleString(
                                            "en-US",
                                            options,
                                        );

                                        tooltipElement.textContent = timeString;
                                        tooltipElement.style.display = "block";

                                        const wrapperRect =
                                            barWrapper.getBoundingClientRect();
                                        const tooltipWidth =
                                            tooltipElement.offsetWidth;
                                        let tooltipX =
                                            event.clientX -
                                            wrapperRect.left -
                                            tooltipWidth / 2;
                                        tooltipX = Math.max(
                                            0,
                                            Math.min(
                                                tooltipX,
                                                wrapperRect.width -
                                                    tooltipWidth,
                                            ),
                                        );

                                        tooltipElement.style.left = `${tooltipX}px`;
                                    } else {
                                        tooltipElement.style.display = "none";
                                    }
                                },
                            );

                            barWrapper.addEventListener("mouseleave", () => {
                                tooltipElement.style.display = "none";
                            });
                        }
                    } else {
                        projectNameElement.textContent = "Error";
                        projectDescriptionElement.textContent =
                            "Invalid project ID.";
                        if (groupEmotionBarElement)
                            groupEmotionBarElement.style.display = "none";
                        const addMemberSection =
                            document.getElementById("add-member-section");
                        if (addMemberSection)
                            addMemberSection.style.display = "none";
                        if (deleteProjectButton)
                            deleteProjectButton.style.display = "none";
                        if (deleteProjectMessage)
                            deleteProjectMessage.style.display = "none";
                        if (repoListElement) repoListElement.innerHTML = "<div class='error-message'>Invalid project ID.</div>";
                        const addRepoSection = document.getElementById("add-repo-section");
                        if (addRepoSection) addRepoSection.style.display = "none";
                    }
                }
            })
            .catch((error) => {
                projectNameElement.textContent = "Error";
                projectDescriptionElement.textContent =
                    "Could not verify login status.";
                if (groupEmotionBarElement)
                    groupEmotionBarElement.style.display = "none";
                const addMemberSection =
                    document.getElementById("add-member-section");
                if (addMemberSection) addMemberSection.style.display = "none";
                if (deleteProjectButton)
                    deleteProjectButton.style.display = "none";
                if (deleteProjectMessage)
                    deleteProjectMessage.style.display = "none";
                if (repoListElement) repoListElement.innerHTML = "<div class='error-message'>Could not verify login status.</div>";
                const addRepoSection = document.getElementById("add-repo-section");
                if (addRepoSection) addRepoSection.style.display = "none";
            });
    });
</script>

<style>
    #project-container {
        padding: 20px;
        font-family: sans-serif;
    }

    #project-name {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    #project-description {
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 16px;
        color: #555;
    }

    #delete-project-button {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
        /* This button also uses .danger-button class */
    }

    .danger-button {
        background-color: #d9534f; /* Base danger color */
        color: white; /* Base danger text color */
        border: none; /* Ensure no border */
        border-radius: 4px; /* Consistent radius */
        cursor: pointer; /* Pointer cursor */
        transition: background-color 0.2s ease; /* Smooth transition */
    }

    .danger-button:hover {
        background-color: #c9302c; /* Darker red on hover */
    }

    .danger-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
        color: #666; /* Dim text color when disabled */
    }

    #delete-project-message {
        min-height: 20px;
    }

    #project-actions-bottom {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #eee;
    }

    #group-emotionbar-container {
        margin-top: 20px;
        margin-bottom: 30px;
    }

    .emotion-gradient-bar-wrapper {
        position: relative;
        width: 100%;
        margin-bottom: 10px;
    }

    .emotion-gradient-bar {
        width: 100%;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #eee;
        display: block;
        height: 30px;
        cursor: crosshair;
    }

    #emotion-tooltip {
        display: none;
        position: absolute;
        background-color: rgba(0, 0, 0, 0.75);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        z-index: 10;
        pointer-events: none;
        bottom: 100%;
        margin-bottom: 5px;
    }

    #group-emotionbar-container .emotion-gradient-bar {
        height: 30px;
        margin-bottom: 10px;
    }

    #group-emotionbar-key ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    #group-emotionbar-key li {
        display: inline-block;
        margin-right: 15px;
        padding: 4px 0;
        font-size: 14px;
        vertical-align: middle;
    }

    #group-emotionbar-key li::before {
        content: "";
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 6px;
        vertical-align: middle;
    }

    :root {
        --color-anger: rgb(239, 83, 80);
        --color-disgust: rgb(102, 187, 106);
        --color-fear: rgb(66, 165, 245);
        --color-happiness: rgb(255, 213, 79);
        --color-sadness: rgb(126, 87, 194);
        --color-surprise: rgb(255, 167, 38);
        --color-neutral: rgb(173, 216, 230);
        --color-nodata: rgb(220, 220, 220);
    }

    #key-anger::before {
        background-color: var(--color-anger);
    }
    #key-disgust::before {
        background-color: var(--color-disgust);
    }
    #key-fear::before {
        background-color: var(--color-fear);
    }
    #key-happiness::before {
        background-color: var(--color-happiness);
    }
    #key-sadness::before {
        background-color: var(--color-sadness);
    }
    #key-surprise::before {
        background-color: var(--color-surprise);
    }
    #key-neutral::before {
        background-color: var(--color-neutral);
    }
    #key-nodata::before {
        background-color: var(--color-nodata);
    }

    h2 {
        margin-top: 30px;
        margin-bottom: 10px;
        font-size: 20px;
    }

    #member-list {
        padding-left: 0;
        margin-top: 10px;
    }

    .member-item {
        margin-bottom: 25px;
        padding: 15px;
        border: 1px solid #eee;
        border-radius: 8px;
        background-color: #f9f9f9;
        position: relative;
    }

    .member-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }

    .member-item h4 {
        margin-top: 0;
        margin-bottom: 0;
        font-size: 18px;
        color: #333;
    }

    /* Increase specificity for remove buttons */
    .member-item .remove-member-button,
    .repo-item .remove-repo-button {
        padding: 4px 8px; /* Keep specific padding */
        font-size: 12px; /* Keep specific font size */
        margin-left: 10px; /* Keep specific margin */
        flex-shrink: 0; /* Keep specific flex property */
        /* Re-add explicit danger styles */
        background-color: #d9534f;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    /* Increase specificity for hover state */
    .member-item .remove-member-button:hover,
    .repo-item .remove-repo-button:hover {
        background-color: #c9302c; /* Darker red on hover */
    }

    .report-summary {
        margin-top: 0;
        margin-bottom: 0;
        font-size: 14px;
        color: #555;
        padding-left: 5px;
    }

    #member-list .error-message {
        color: red;
        font-weight: bold;
    }

    #group-mood-summary {
        margin-top: 10px;
        margin-bottom: 20px;
        font-size: 16px;
        color: #333;
    }

    #group-mood-summary strong {
        margin-right: 5px;
    }

    select {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        text-decoration: none;
        background-color: var(--golden-treasure);
        color: var(--parchment);
        border: none;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        font-weight: 100;
        border-radius: 0.5rem;
        cursor: pointer;
        transition:
            transform 0.2s ease,
            box-shadow 0.3s ease;
        box-shadow: var(--shadow);
        position: relative;
        overflow: hidden;
        z-index: 0;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        color: var(--charcoal);
    }

    select::before {
        content: "";
        position: absolute;
        background: var(--golden-treasure);
        width: 100%;
        height: 0%;
        top: 0;
        left: 0;
        z-index: -1;
        transition: height 0.2s ease;
    }

    select:hover::before {
        height: 100%;
    }

    select:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
    }

    select * {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    #add-member-section, #add-repo-section {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    #add-member-section input[type="text"],
    #add-repo-section input[type="text"] {
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        flex-grow: 1;
    }

    #add-member-section button,
    #add-repo-section button {
        padding: 8px 15px;
        background-color: var(--golden-treasure);
        color: var(--charcoal);
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
        white-space: nowrap;
    }

    #add-member-section button:hover,
    #add-repo-section button:hover {
        background-color: #e6b800;
    }

    #new-member-username {
        max-width: 25%; min-width: 200px;
    }
    #new-repo-url {
        max-width: 50%; min-width: 300px;
    }

    #repo-list {
        padding-left: 0;
        margin-top: 10px;
        margin-bottom: 30px;
    }

    .repo-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px 15px;
        border: 1px solid #eee;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .repo-url {
        font-size: 14px;
        color: #333;
        word-break: break-all;
        margin-right: 15px;
    }

    #repo-list .error-message {
        color: red;
        font-weight: bold;
    }

    .message {
        margin-left: 10px;
        font-size: 14px;
        padding: 5px 0;
    }
    .message.info {
        color: #31708f;
    }
    .message.success {
        color: #3c763d;
        font-weight: bold;
    }
    .message.error {
        color: #a94442;
        font-weight: bold;
    }

    .owner-label {
        font-size: 0.8em;
        font-weight: normal;
        color: #666;
        margin-left: 5px;
    }
</style>
